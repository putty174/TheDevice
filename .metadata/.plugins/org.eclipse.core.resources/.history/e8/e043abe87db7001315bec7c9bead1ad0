package com.pressx.shop.objects;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.pressx.actions.ActionQueue;
import com.pressx.managers.Draw;
import com.pressx.managers.Sounds;
import com.pressx.managers.Textures;
import com.pressx.objects.attributes.MovementAttributes;
import com.pressx.objects.attributes.StandardAttributes;
import com.pressx.objects.device.Device;

public class GameObject implements Comparable<GameObject>{
	/* Managers */
	protected Draw draw;
	protected Sounds sounds;
	protected Textures textures;
	
	/* Stats */
	public MovementAttributes movement = new MovementAttributes();
	protected StandardAttributes health = new StandardAttributes();
	
	/* Identification */
	private int objectID; //Indicates the type of object this object is.
	
	/* Drawing */
	protected Sprite sprite;
	protected int srcWidth, srcHeight; //The size of the sprite to draw.
	protected float drawWidth, drawHeight; //The size of the image to be drawn.
	protected float drawOffsetX, drawOffsetY; //The offset of where the image is drawn.
	private float orientation = 0; //How the image is oriented when drawn (in degrees).
	
	/* Position and Movement */
	protected Vector2 position; //The x and y position of the object.
	protected Vector2 velocity; //The velocity at which the object is moving at.
	
	/* Life and Death */
	private boolean isGone = false;
	private boolean isDying;
	
	/* Physics */
	protected float mass; //How massive the object is.
	protected float friction; //The amount the velocity decelerates after each update.
	
	/* Collision */
	protected float hitWidth, hitHeight; //The width and height of the hitbox.
	protected float hitOffsetX, hitOffsetY;  //The offset of the hitbox.
	private HashSet<GameObject> collidedList; //A list of things the object has already collided with.
	/*TODO unprotect*/protected boolean isSolid; //Whether or not other solid objects can go through this object.
	protected boolean screenBound; //Whether or not the object is bound by the screen.
	
	/* Touch */
	protected boolean isTouchable; //Whether or not the object can be interacted with.
	private float touchRadius; //The distance from the center to area touched before it registers a touch.
	
	/* Actions */
	protected ActionQueue action_queue = new ActionQueue();
	
	/* XP Worth */
	public int worth;
	
	/* Level Up */
	public float levelUp = 0;
	
	/* Godmode */
	protected boolean isInvincible;
	
	/* Constructors */	
	/**
	 * Constructs an object for a game.
	 * 
	 * @param objectID the identifier for the object
	 * @param posX the x position of the object in space
	 * @param posY the y position of the object in space
	 * @param mass how massive the object is
	 * @param friction the magnitude of the friction force applied to the object
	 * @param hitWidth the width of the hitbox
	 * @param hitHeight the height of the hitbox
	 * @param hitX the x offset of the hitbox
	 * @param hitY the y offset of the hitbox
	 * @param isSolid whether or not the object can be moved through
	 * @param touchRadius how far away the player can touch on the screen to get this object to being registered as being touched
	 * @param isTouchable if the object is touchable or not
	 * @param drawWidth the width that the object is drawn at
	 * @param drawHeight the height that the object is drawn at
	 * @param sprites the set of sprites to be used in drawing the object
	 * @param srcWidth the width of a sprite
	 * @param srcHeight the height of a sprite
	 */
	public GameObject(Draw draw, Sounds sounds, Textures textures, int objectID, float posX, float posY, float mass, float friction, float hitWidth, float hitHeight, float hitX, float hitY, boolean isSolid, float touchRadius, boolean isTouchable, float drawWidth, float drawHeight, Texture sprites, int srcWidth, int srcHeight)
	{
		/* Managers */
		this.draw = draw;
		this.sounds = sounds;
		this.textures = textures;
		
		/* ID */
		this.objectID = objectID;
		
		/* Position and Movement */
		this.position = new Vector2(posX, posY);
		this.velocity = new Vector2();
		
		/* Physics */
		this.mass = mass;
		this.friction = friction;
		//HP set here for now

		/* Collision */
		this.hitWidth = hitWidth;
		this.hitHeight = hitHeight;
		this.hitOffsetX = hitX;
		this.hitOffsetY = hitY;
		this.isSolid = isSolid;
		this.collidedList = new HashSet<GameObject>();
		
		/* Touch */
		this.touchRadius = touchRadius;
		this.isTouchable = isTouchable;
		
		/* Drawing */
		this.drawWidth = drawWidth;
		this.drawHeight = drawHeight;
		
		/* Sprite */
		this.srcWidth = srcWidth;
		this.srcHeight = srcHeight;
		this.sprite = new Sprite(sprites, srcWidth, srcHeight);
		
		/* Godmode */
		this.isInvincible = false;
		
	}//END GameObject
	
	/* Identification */
	/**
	 * @return the object's ID.
	 */
	public final int getID()
	{
		return this.objectID;
	}//END getID
	
	/* Position and Movement */
	//Position
	/**
	 * Sets the position.
	 * 
	 * @param x position on the x axis
	 * @param y position on the y axis
	 */
	public final void set_position(float x, float y)
	{
		this.position.set(x, y);
	}//END set_position
	
	/**
	 * Sets the position.
	 * 
	 * @param pos the point to set the position at.
	 */
	public final void set_position(Vector2 pos)
	{
		this.position.set(pos);
	}//END set_position
	
	/**
	 * 
	 * @return position on the x axis
	 */
	public final float get_positionX()
	{
		return this.position.x;
	}//END get_positionX
	
	/**
	 * 
	 * @return position on the y axis
	 */
	public final float get_positionY()
	{
		return this.position.y;
	}//END get_positionY
	
	/**
	 * 
	 * @return clone of the position vector
	 */
	public final Vector2 get_position()
	{
		return this.position.cpy();
	}//END get_position
	
	//Movement
	/**
	 * Moves the object.
	 * 
	 * @param jumpX the amount to move on the x axis
	 * @param jumpY the amount to move on the y axis
	 */
	public final void jump(ArrayList<GameObject> colliders, float jumpX, float jumpY)
	{
		//Y Direction
		Vector2 nextPos = this.position.cpy().add(0, jumpY);
		int collisionY = this.collides(colliders, nextPos);
		if(collisionY != 1 && !offscreenY(nextPos)) //If does not collide with a solid...
		{
			this.position.set(nextPos);
		}//fi
		
		//X Direction
		nextPos = this.position.cpy().add(jumpX, 0);
		int collisionX = this.collides(colliders, nextPos);
		if(collisionX != 1 && !offscreenX(nextPos)) //If does not collide with a solid...
		{
			this.position.set(nextPos);
		}//fi
	}//END jump
	
	/**
	 * Moves the object.
	 * 
	 * @param jump the vector to be added to the current position vector
	 */
	public final void jump(ArrayList<GameObject> colliders, Vector2 jump)
	{
		this.jump(colliders, jump.x, jump.y);
	}//END jump
	
	private boolean offscreenX(Vector2 nextPos)
	{
		if(this.screenBound && (nextPos.x < srcWidth * .02 || nextPos.x > 100*(0.8f) - (srcWidth * .02)))
		{
			this.velocity.x = -this.velocity.x;
			return true;
		}//fi
		return false;
	}//END offscreenCheckX
	
	private boolean offscreenY(Vector2 nextPos)
	{
		if(this.screenBound && (nextPos.y < srcHeight * .02 || nextPos.y > 100*(0.7f) - (srcHeight * .042)))
		{
			this.velocity.y = -this.velocity.y;
			return true;
		}//fi
		return false;
	}//END offscreenCheckY
	
	// Velocity
	/**
	 * Makes it so the velocity can't go over the max velocity.
	 */
	private void check_velocity()
	{
		float vmag = this.get_vMagnitude();
		if(vmag > this.movement.speedcap)
		{
			double d = this.get_velocityDirection() * Math.PI/180;
			
			float xComp = (float)(this.movement.speedcap * Math.cos(d));
			float yComp = (float)(this.movement.speedcap * Math.cos(d));
			
			this.velocity.set(xComp, yComp);
		}//fi
	}//END check_velocity
	
	/**
	 * Sets the velocity of the object.
	 * 
	 * @param vX velocity on the x axis.
	 * @param vY velocity on the y axis.
	 */
	public final void set_velocity(float vX, float vY)
	{
		this.velocity.set(vX, vY);
		this.check_velocity();
	}//END set_velocity
	
	/**
	 * Sets the velocity of the object.
	 * 
	 * @param v velocity vector
	 */
	public final void set_velocity(Vector2 v)
	{
		this.velocity.set(v);
		this.check_velocity();
	}//END set_velocity
	
	/**
	 * Adds velocity to the object.
	 * 
	 * @param vX velocity on the x axis
	 * @param vY velocity on the y axis
	 */
	public final void add_velocity(float vX, float vY)
	{
		this.velocity.add(vX, vY);
		this.check_velocity();
	}//END add_velocity
	
	/**
	 * Adds velocity to the object.
	 * 
	 * @param v velocity vector
	 */
	public final void add_velocity(Vector2 v)
	{
		this.velocity.add(v);
		this.check_velocity();
	}//END add_velocity
	
	/**
	 * Subtracts velocity from the object.
	 * 
	 * @param vX velocity on the x axis
	 * @param vY velocity on the y axis
	 */
	public final void sub_velocity(float vX, float vY)
	{
		this.velocity.sub(vX, vY);
		this.check_velocity();
	}//END sub_velocity
	
	/**
	 * Subtracts velocity from the object.
	 * 
	 * @param v
	 */
	public final void sub_velocity(Vector2 v)
	{
		this.velocity.sub(v);
		this.check_velocity();
	}//END sub_velocity
	
	/**
	 * 
	 * @return velocity on the x axis
	 */
	public float get_velocityX()
	{
		return this.velocity.x;
	}//END get_velocityX
	
	/**
	 * 
	 * @return velocity on the y axis
	 */
	public final float get_velocityY()
	{
		return this.velocity.y;
	}//END get_velocityY
	
	/**
	 * 
	 * @return clone of the velocity vector
	 */
	public final Vector2 get_velocity()
	{
		return this.velocity.cpy();
	}//END get_velocity
	
	/**
	 * @return the magnitude of the velocity
	 */
	public final float get_vMagnitude()
	{
		return (float)Math.sqrt(this.velocity.x * this.velocity.x  + this.velocity.y * this.velocity.y);
	}//END get_vMagnitude
	
	//Update
	/**
	 * Basic move update.
	 * 
	 * @param dt difference in time since last update
	 * @param objects list of objects in the room
	 */
	protected void update_move(float dt, ArrayList<GameObject> objects)
	{
		this.check_velocity();
		this.jump(objects, this.velocity.x * dt, this.velocity.y * dt);
	}//END update_move
	
	/**
	 * @return direction of the velocity (in degrees)
	 */
	public final float get_velocityDirection()
	{
		return this.velocity.angle();
	}//END get_velocityDirection
	
	/* Collision */
	//HitBox
	/**
	 * Sets the collision area of the hitbox.
	 * 
	 * @param width the width of the hitbox
	 * @param height the height of the hitbox
	 */
	public final void set_hitbox(float width, float height)
	{
		this.hitHeight = height;
		this.hitWidth = width;
	}//END set_hitbox
	
	/**
	 * @return the width of the hitbox
	 */
	public final float get_hitWidth()
	{
		return this.hitWidth;
	}//END get_hitWidth
	
	/**
	 * @return the height of the hitbox
	 */
	public final float get_hitHeight()
	{
		return this.hitHeight;
	}//END get_hitHeight
	
	/**
	 * @return the x offset of the hitbox.
	 */
	public float get_hitOffsetX()
	{
		return this.hitOffsetX;
	}//END get_hitOffsetX
	
	/**
	 * @return the y offset of the hitbox.
	 */
	public float get_hitOffsetY()
	{
		return this.hitOffsetY;
	}//END get_hitOffsetX
	
	//Solid
	/**
	 * @return whether or not the object is solid
	 */
	public boolean isSolid()
	{
		return this.isSolid;
	}//END isSolid
	
	//Collision
	/**
	 * Collides with objects and gives an indicator.
	 * 
	 * @param objects the objects that could collide
	 * @return 0 if collides with nothing, 1 with a solid, 2 with an object that invokes behavior, 3 if collides with an object if both solid and invokes behavior
	 */
	private int collides(ArrayList<GameObject> objects, Vector2 checkPos)
	{
		int collision = 0;
		
		Iterator<GameObject> iter = objects.iterator();
		while(iter.hasNext())
		{
			GameObject obj = iter.next();
			
			if(obj != this && this.isColliding(obj, checkPos))
			{
				if(this.isSolid() && obj.isSolid())
				{
					collision = 1;
				}//fi
				
				if(!this.hasCollided(obj))
				{
					this.behavior_collision(obj);
					this.collidedAdd(obj);
					obj.behavior_collision(this);
					obj.collidedAdd(this);
				}//fi
			}//fi
		}//elihw
		
		return collision;
	}//END collides
	
	protected boolean isColliding(GameObject collider, Vector2 checkPos)
	{
		Rectangle self_rect = new Rectangle(checkPos.x - this.get_hitWidth()/2 + this.get_hitOffsetX(),
											checkPos.y - this.get_hitHeight()/2 + this.get_hitOffsetY(),
											this.get_hitWidth(),
											this.get_hitHeight());
		Rectangle collider_rect = new Rectangle(collider.get_positionX() - collider.get_hitWidth()/2 + collider.get_hitOffsetX(),
												collider.get_positionY() - collider.get_hitHeight()/2 + collider.get_hitOffsetY(),
												collider.get_hitWidth(),
												collider.get_hitHeight());
		
		return Intersector.intersectRectangles(self_rect, collider_rect, new Rectangle());
	}//END isColliding
	
	/**
	 * Behavior that the object does when colliding with something.
	 * 
	 * @param collider the object that this has collided with
	 */
	protected void behavior_collision(GameObject collider)
	{
		//Override this function.
	}//END behaviorCollision
	
	//Already Collided
	private void collidedAdd(GameObject obj)
	{
		this.collidedList.add(obj);
	}//END collidedAdd
	
	/**
	 * Checks whether or not the object has collided with the indicated or not.
	 * 
	 * @param obj the object to check
	 * @return true if has collided, otherwise false
	 */
	protected boolean hasCollided(GameObject obj)
	{		
		Iterator<GameObject> iter = this.collidedList.iterator();
		while(iter.hasNext())
		{
			GameObject collided = iter.next();
			
			if(collided == obj)
			{
				return true;
			}//fi
		}//elihw
		
		return false; //If there are no objects...
	}//END hasCollided
	
	/* Physics */
	//Mass
	/**
	 * @return the mass of the object
	 */
	public final float get_mass()
	{
		return this.mass;
	}//END get_mass
	
	//Impact
	/**
	 * The action of this object getting hit from a certain direction.
	 * 
	 * @param power how powerful the impact was
	 * @param direction the direction of the impact (in radians)
	 */
	public void impact(float power, double direction)
	{
		float impactV = power/this.mass;
		float xComp = (float)(impactV * Math.cos(direction));
		float yComp = (float)(impactV * Math.sin(direction));
		
		this.add_velocity(xComp, yComp);
	}//END impact
	
	//Momentum
	/**
	 * @return the momentum of the object (p = m*v)
	 */
	public final Vector2 get_momentum()
	{
		return new Vector2(this.velocity.cpy().mul(this.mass));
	}//END add_momentum
	
	/**
	 * Changes the velocity of the object based on momentum.
	 * 
	 * @param momentum the momentum of the colliding object.
	 */
	public final void momentum_collision(Vector2 momentum)
	{
		Vector2 tot_momentum = this.get_momentum().add(momentum);
		this.velocity.add(tot_momentum.div(this.mass));
	}//END momentum_collision
	
	//Update
	/**
	 * Applies friction to the object.
	 * 
	 * @param dt the difference in time
	 */
	protected void update_friction(float dt)
	{
		if(this.friction * dt >= this.get_vMagnitude())
		{
			this.set_velocity(0, 0);
		}//fi
		else
		{
			double fDir = (this.get_velocityDirection()) * Math.PI / 180;
			float xComp = (float)(this.friction * Math.cos(fDir)) * dt;
			float yComp = (float)(this.friction * Math.sin(fDir)) * dt;
			this.velocity.sub(xComp, yComp);
		}//esle
	}//END update_physics	
	
	/* Drawing */
	/**
	 * Sets the image of the object to the indicated image in a larger image.
	 * 
	 * @param x the sprite column number.
	 * @param y the sprite row number.
	 */
	protected final void set_sprite(int x, int y)
	{
		this.sprite.setRegion(x * this.srcWidth, y * this.srcHeight, this.srcWidth, this.srcHeight);
	}//END set_sprite
	
	/**
	 * Sets the size of the of what to draw on the screen.
	 * 
	 * @param width the width of the object that will be drawn
	 * @param height the height of the object that will be drawn
	 */
	public final void set_drawSize(float width, float height)
	{
		this.drawWidth= width;
		this.drawHeight = height;
	}//END set_drawSize
	
	/** 
	 * @return the height of the drawn sprite
	 */
	public final float getDrawHeight()
	{
		return this.drawHeight;
	}//END getDrawHeight
	
	/**
	 * @return the width of the drawn sprite
	 */
	public final float getDrawWidth()
	{
		return this.drawWidth;
	}//END getDrawWidth
	
	/**
	 * Sets the facing angle of the object.
	 * 
	 * @param degrees facing angle.
	 */
	public final void set_orientation(float degrees)
	{
		this.orientation = degrees;
	}//END set_orientation
	
	/**
	 * Renders the object to the screen.
	 * 
	 * @param spritebatch used to render this object to the screen.
	 */
	public void render(SpriteBatch spritebatch, float[] renderInfo)
	{
		float xPos = renderInfo[2] * (this.position.x - this.drawWidth/2 + this.drawOffsetX);
		float yPos = renderInfo[2] * (this.position.y - this.drawHeight/2  + this.drawOffsetY);
		float width = renderInfo[2] * (this.drawWidth);
		float height = renderInfo[2] * (this.drawHeight);
		this.sprite.setOrigin(renderInfo[2] * (this.drawWidth/2),
				renderInfo[2] * (this.drawHeight/2));
		this.sprite.setSize(width, height);
		this.sprite.setRotation(this.orientation);
		this.sprite.setPosition(xPos, yPos);
		this.sprite.draw(spritebatch);
		
		draw.draw(Draw.TYPES.ACTOR, sprite, xPos, yPos, width, height);
	}//END render
	
	/* Update */
	/**
	 * Updates the object.
	 * 
	 * @param dt the time passed between the current cycle and the last cycle
	 * @param objects the list of objects that can potentially interact
	 */
	public void update(float dt, ArrayList<GameObject> objects)
	{
		this.action_queue.act(this);
		this.update_move(dt, objects);
		this.update_friction(dt);
		try{
			Device dev = (Device) this;
			this.setHp(9001);
		}
		catch (Exception e){
			
		}
	}//END update
	
	/**
	 * Does stuff at the end of the cycle.
	 */
	public void endUpdate()
	{
		this.collidedList.clear();
	}//END endUpdate
	
	/* Touch */
	/**
	 * Detects if the object has been touched and does something based on that.
	 * 
	 * @param x the x value of where the user touched
	 * @param y the y value of where the user touched
	 */
	public final boolean touch(float x, float y)
	{
		if(this.isTouched(x, y))
		{
			this.behavior_touch();
			return true;
		}//fi
		//else...
		return false;
	}//END touch
	
	private boolean isTouched(float x, float y)
	{
		//If point is in the object's hitbox
		if(this.position.dst(x, y) <= this.touchRadius/2 && this.isTouchable)
			{
				return true;
			}//fi
		//else...
		return false;
	}//END isTouched
	
	/**
	 * The behavior when this object has been touched or clicked.
	 */
	protected void behavior_touch()
	{
		//TODO TEST
		//System.out.println("Can't touch " + this + "!");
		//Override this function.
	}//END behavior_touched

	/* Stats */
	/**
	 * @return the speed of the object
	 */
	public float get_speed()
	{
		return movement.speed;
	}//END get_speed
	
	public void set_speed(float speed){
		movement.speed = speed;
	}
	
	/**
	 * @return the current hp of the object
	 */
	public float getHp()
	{
		return health.current;
	}

	/**
	 * Sets the current hp to the indicated level.
	 * 
	 * @param hp the health to set the health of the object at
	 */
	public void setHp(float hp)
	{
		if(hp < this.health.max)
		{
			this.health.current = hp;
		}//fi
		else
		{
			this.health.current = this.health.max;
		}//esle
	}//END setHp
	
	public StandardAttributes get_healthAttribute()
	{
		return this.health;
	}//END get_healthAttribute
	
	/* Life and Death */
	/**
	 * @return whether or not this object is gone or not
	 */
	public boolean isGone()
	{
		return this.isGone;
	}//END isDead
	
	/**
	 * Sets the object to be removed from the game.
	 */
	public void terminate()
	{
		this.isGone = true;
	}//END terminate

	/* Compare */
	protected float getZ()
	{
		return this.get_positionY() - this.drawHeight/2 + this.drawOffsetY;
	}

	@Override
	public int compareTo(GameObject o) {
		Float selfZ = this.getZ();
		Float otherZ = o.getZ();
		return otherZ.compareTo(selfZ);
	}
	
	public float getSpriteHeight()
	{
		return this.drawHeight * 0.5f + this.drawOffsetY;
	}
	
	public void toggleGodMode(){
		isInvincible = !isInvincible;
	}
	
	public boolean isScreenCollide(){
		return (this.position.x <= 10 || this.position.y >= 90 || this.position.y <= 5 || this.position.y >= 50);
	}

	public void update() {
		// TODO Auto-generated method stub
		
	}

	public boolean isDying() {
		return isDying;
	}

}//END class GameObject